{"version":3,"file":"index.js","mappings":"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","sources":["webpack://wp-extend/./src/index.js"],"sourcesContent":["const { registerBlockType } = wp.blocks;\nconst { InspectorControls } = wp.blockEditor || wp.editor;\nconst { PanelBody, TextControl, RangeControl } = wp.components;\nconst { useEffect, useState } = wp.element;\nconst { apiFetch } = wp;\n\nif (typeof wp !== 'undefined' && wp.blocks && wp.blockEditor && wp.components && wp.element && typeof ewp_blocks !== 'undefined') {\n  Object.keys(ewp_blocks).forEach((key) => {\n    const block = ewp_blocks[key];\n    const namespace = `${block.namespace}/${block.name}`;\n    registerBlockType(namespace, {\n      title: block.title,\n      icon: block.icon,\n      category: block.category,\n      attributes: block.attributes,\n      edit: function (props) {\n        const { attributes, setAttributes } = props;\n\n        // Initialize inputValues with default or initial values from block.attributes\n        const initialValues = Object.keys(block.attributes).reduce((acc, attrKey) => {\n          const attribute = block.attributes[attrKey];\n          acc[attrKey] = attributes[attrKey] || attribute.default || '';\n          return acc;\n        }, {});\n\n        const [content, setContent] = useState('');\n        const [inputValues, setInputValues] = useState(initialValues);\n        const [errorMessage, setErrorMessage] = useState('');\n\n        const handleInputChange = (identifier, newValue) => {\n          setInputValues({\n            ...inputValues,\n            [identifier]: newValue,\n          });\n\n          // Check if the field is required and not filled in\n          if (block.attributes[identifier].required && !newValue) {\n            setErrorMessage(`${block.attributes[identifier].label || identifier} is required.`);\n          } else {\n            setErrorMessage(''); // Clear error if filled\n          }\n        };\n\n        useEffect(() => {\n          // Fetch and set content logic\n          const queryParams = new URLSearchParams(inputValues).toString();\n          apiFetch({ path: `${block.namespace}/${block.name}/preview?${queryParams}` }).then((html) => {\n            setContent(html);\n            var data = { response: html, block: block };\n            const event = new CustomEvent(\"ewp_dynamic_block_on_change\", { detail: data });\n            document.dispatchEvent(event);\n          });\n        }, [JSON.stringify(inputValues)]);\n\n        if (typeof block.attributes === 'object' && block.attributes !== null) {\n          var elements = [];\n          Object.entries(block.attributes).forEach(([key, data]) => {\n        // key is the attribute name\n        // value is the attribute value\n            switch (data.render_type) {\n              case 'select':\n                elements.push(wp.element.createElement(wp.components.SelectControl, {\n                  label: data.label,\n                  value: props.attributes[key],\n                  options: data.options,\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  }\n                }));\n                break;\n              case 'color':\n                elements.push(wp.element.createElement(wp.components.ColorPicker, {\n                  label: data.label,\n                  color: props.attributes[key], // Use 'color' instead of 'value'\n                  onChangeComplete: function (value) {\n                    const colorValue = value.hex;\n                    setAttributes({ [key]: colorValue });\n                    handleInputChange(key, colorValue);\n                  }\n                }));\n                break;\n              case 'textarea':\n                elements.push(wp.element.createElement(wp.components.TextareaControl, {\n                  label: data.label,\n                  value: props.attributes[key],\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  }\n                }));\n                break;\n              case 'number':\n                elements.push(wp.element.createElement(wp.components.RangeControl, {\n                  label: data.label,\n                  value: props.attributes[key],\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  },\n                  min: data.attributes.min || 0,\n                  max: data.attributes.max || 100,\n                  step: data.attributes.step || 1\n                }));\n                break;\n              case 'string':\n                elements.push(wp.element.createElement(wp.components.TextControl, {\n                  label: data.label,\n                  value: props.attributes[key],\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  }\n                }));\n                break;\n              case 'boolean':\n                elements.push(wp.element.createElement(wp.components.ToggleControl, {\n                  label: data.label,\n                  checked: props.attributes[key],\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  }\n                }));\n                break;\n              default:\n                // Handle other types\n                break;\n            }\n          });\n\n          return [\n            wp.element.createElement(\n              InspectorControls,\n              null,\n              wp.element.createElement(\n                PanelBody,\n                {\n                  title: block.title + ' Settings', initialOpen: true\n                },\n                elements\n              )\n            ),\n            wp.element.createElement(\n              'div',\n              {\n                className: props.className,\n              },\n              // Display error message if any required fields are missing\n              errorMessage && wp.element.createElement('p', { style: { color: 'red' } }, errorMessage),\n              wp.element.createElement(\n                'div',\n                {\n                  dangerouslySetInnerHTML: { __html: content }\n                }\n              )\n            ),\n          ];\n        }\n      },\n      save: function () {\n        return null; // Server-side rendering, so no save needed\n      },\n    });\n  });\n}"],"names":["registerBlockType","wp","blocks","InspectorControls","blockEditor","editor","_wp$components","components","PanelBody","_wp$element","TextControl","RangeControl","element","useEffect","useState","apiFetch","ewp_blocks","Object","keys","forEach","key","block","namespace","concat","name","title","icon","category","attributes","edit","props","setAttributes","initialValues","reduce","acc","attrKey","attribute","_useState2","_slicedToArray","content","setContent","_useState4","inputValues","setInputValues","_useState6","errorMessage","setErrorMessage","handleInputChange","identifier","newValue","_objectSpread","_defineProperty","required","label","queryParams","URLSearchParams","toString","path","then","html","event","CustomEvent","detail","response","document","dispatchEvent","JSON","stringify","_typeof","elements","entries","_ref2","_ref3","data","render_type","push","createElement","SelectControl","value","options","onChange","ColorPicker","color","onChangeComplete","colorValue","hex","TextareaControl","min","max","step","ToggleControl","checked","initialOpen","className","style","dangerouslySetInnerHTML","__html","save"],"sourceRoot":""}