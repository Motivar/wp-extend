{"version":3,"file":"index.js","mappings":"yrEAAA,IAAQA,EAAsBC,GAAGC,OAAzBF,kBACAG,GAAsBF,GAAGG,aAAeH,GAAGI,QAA3CF,kBACRG,EAAiDL,GAAGM,WAA5CC,EAASF,EAATE,UACRC,GAD8BH,EAAXI,YAAyBJ,EAAZK,aACAV,GAAGW,SAA3BC,EAASJ,EAATI,UAAWC,EAAQL,EAARK,SACXC,EAAad,GAAbc,SAEU,oBAAPd,IAAsBA,GAAGC,QAAUD,GAAGG,aAAeH,GAAGM,YAAcN,GAAGW,SAAiC,oBAAfI,YACpGC,OAAOC,KAAKF,YAAYG,SAAQ,SAACC,GAC/B,IAAMC,EAAQL,WAAWI,GACnBE,EAAY,GAAHC,OAAMF,EAAMC,UAAS,KAAAC,OAAIF,EAAMG,MAC9CxB,EAAkBsB,EAAW,CAC3BG,MAAOJ,EAAMI,MACbC,KAAML,EAAMK,KACZC,SAAUN,EAAMM,SAChBC,WAAYP,EAAMO,WAClBC,KAAM,SAAUC,GACd,IAAQF,EAA0CE,EAA1CF,WAAYG,EAA8BD,EAA9BC,cAGdC,GAH4CF,EAAfG,WAGbhB,OAAOC,KAAKG,EAAMO,YAAYM,QAAO,SAACC,EAAKC,GAC/D,IAAMC,EAAYhB,EAAMO,WAAWQ,GAEnC,OADAD,EAAIC,GAAWR,EAAWQ,IAAYC,EAAS,SAAY,GACpDF,CACT,GAAG,CAAC,IAEsCG,EAAAC,EAAZzB,EAAS,IAAG,GAAnC0B,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GACmCI,EAAAH,EAAvBzB,EAASkB,GAAc,GAAtDW,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GACkBG,EAAAN,EAAZzB,EAAS,IAAG,GAA7CgC,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACQG,EAAAT,EAAdzB,GAAS,GAAK,GAA5BmC,GAAFD,EAAA,GAAYA,EAAA,IAEpBE,EAAoB,SAACC,EAAYC,GACrCR,EAAcS,EAAAA,EAAC,CAAC,EACXV,GAAW,GAAAW,EAAA,GACbH,EAAaC,KAIZ/B,EAAMO,WAAWuB,GAAYI,WAAaH,GAC5CL,EAAgB,GAADxB,OAAIF,EAAMO,WAAWuB,GAAYK,OAASL,EAAU,kBACnEF,GAAW,KAEXF,EAAgB,IAChBE,GAAW,GAEf,EAkCA,GAhCApC,GAAU,WAER,IAAM4C,EAAc,IAAIC,gBAAgBf,GAAagB,WACrD5C,EAAS,CAAE6C,KAAM,GAAFrC,OAAKF,EAAMC,UAAS,KAAAC,OAAIF,EAAMG,KAAI,aAAAD,OAAYkC,KAAiBI,MAAK,SAACC,GAClFrB,EAAWqB,GACX,IACMC,EAAQ,IAAIC,YAAY,8BAA+B,CAAEC,OADpD,CAAEC,SAAUJ,EAAMzC,MAAOA,KAEpC8C,SAASC,cAAcL,EACzB,GACF,GAAG,CAACM,KAAKC,UAAU3B,KAiBnB9B,GAAU,WAdqB,IACzB0D,KAAY,EAChBtD,OAAOuD,QAAQnD,EAAMO,YAAYT,SAAQ,SAAAsD,GAAiB,IAAAC,EAAAnC,EAAAkC,EAAA,GAAfrD,EAAGsD,EAAA,GAAEC,EAAID,EAAA,GAC9CC,EAAKpB,WAAaZ,EAAYvB,KAChC2B,EAAgB,GAADxB,OAAIoD,EAAKnB,OAASpC,EAAG,kBACpCmD,GAAY,EAEhB,IAEAtB,GAAYsB,GACJA,GAMNtE,GAAG0E,KAAKC,SAAS,qBAAqBC,YAAY/C,EAAMgD,SAE5D,GAAG,CAACnC,IAE4B,WAA5BoC,EAAO1D,EAAMO,aAAgD,OAArBP,EAAMO,WAAqB,CACrE,IAAIoD,EAAW,GA4Ef,OA3EA/D,OAAOuD,QAAQnD,EAAMO,YAAYT,SAAQ,SAAA8D,GAAiB,IAAAC,EAAA3C,EAAA0C,EAAA,GAAf7D,EAAG8D,EAAA,GAAEP,EAAIO,EAAA,GAGlD,OAAQP,EAAKQ,aACX,IAAK,SACHH,EAASI,KAAKnF,GAAGW,QAAQyE,cAAcpF,GAAGM,WAAW+E,cAAe,CAClE9B,MAAOmB,EAAKnB,MACZ+B,MAAOzD,EAAMF,WAAWR,GACxBoE,QAASb,EAAKa,QACdC,SAAU,SAAUF,GAClBxD,EAAauB,EAAC,CAAC,EAAElC,EAAMmE,IACvBrC,EAAkB9B,EAAKmE,EACzB,KAEF,MACF,IAAK,QACHP,EAASI,KAAKnF,GAAGW,QAAQyE,cAAcpF,GAAGM,WAAWmF,YAAa,CAChElC,MAAOmB,EAAKnB,MACZmC,MAAO7D,EAAMF,WAAWR,GACxBwE,iBAAkB,SAAUL,GAC1B,IAAMM,EAAaN,EAAMO,IACzB/D,EAAauB,EAAC,CAAC,EAAElC,EAAMyE,IACvB3C,EAAkB9B,EAAKyE,EACzB,KAEF,MACF,IAAK,WACHb,EAASI,KAAKnF,GAAGW,QAAQyE,cAAcpF,GAAGM,WAAWwF,gBAAiB,CACpEvC,MAAOmB,EAAKnB,MACZ+B,MAAOzD,EAAMF,WAAWR,GACxBqE,SAAU,SAAUF,GAClBxD,EAAauB,EAAC,CAAC,EAAElC,EAAMmE,IACvBrC,EAAkB9B,EAAKmE,EACzB,KAEF,MACF,IAAK,SACHP,EAASI,KAAKnF,GAAGW,QAAQyE,cAAcpF,GAAGM,WAAWI,aAAc,CACjE6C,MAAOmB,EAAKnB,MACZ+B,MAAOzD,EAAMF,WAAWR,GACxBqE,SAAU,SAAUF,GAClBxD,EAAauB,EAAC,CAAC,EAAElC,EAAMmE,IACvBrC,EAAkB9B,EAAKmE,EACzB,EACAS,IAAKrB,EAAK/C,WAAWoE,KAAO,EAC5BC,IAAKtB,EAAK/C,WAAWqE,KAAO,IAC5BC,KAAMvB,EAAK/C,WAAWsE,MAAQ,KAEhC,MACF,IAAK,SACHlB,EAASI,KAAKnF,GAAGW,QAAQyE,cAAcpF,GAAGM,WAAWG,YAAa,CAChE8C,MAAOmB,EAAKnB,MACZ+B,MAAOzD,EAAMF,WAAWR,GACxBqE,SAAU,SAAUF,GAClBxD,EAAauB,EAAC,CAAC,EAAElC,EAAMmE,IACvBrC,EAAkB9B,EAAKmE,EACzB,KAEF,MACF,IAAK,UACHP,EAASI,KAAKnF,GAAGW,QAAQyE,cAAcpF,GAAGM,WAAW4F,cAAe,CAClE3C,MAAOmB,EAAKnB,MACZ4C,QAAStE,EAAMF,WAAWR,GAC1BqE,SAAU,SAAUF,GAClBxD,EAAauB,EAAC,CAAC,EAAElC,EAAMmE,IACvBrC,EAAkB9B,EAAKmE,EACzB,KAOR,IAEO,CACLtF,GAAGW,QAAQyE,cACTlF,EACA,KACAF,GAAGW,QAAQyE,cACT7E,EACA,CACEiB,MAAOJ,EAAMI,MAAQ,YAAa4E,aAAa,GAEjDrB,IAGJ/E,GAAGW,QAAQyE,cACT,MACA,CACEiB,UAAWxE,EAAMwE,WAGnBxD,GAAgB7C,GAAGW,QAAQyE,cAAc,IAAK,CAAEkB,MAAO,CAAEZ,MAAO,QAAW7C,GAC3E7C,GAAGW,QAAQyE,cACT,MACA,CACEmB,wBAAyB,CAAEC,OAAQjE,MAK7C,CACF,EACAkE,KAAM,WACJ,OAAKC,QACE,IACT,GAEJ,G","sources":["webpack://wp-extend/./src/index.js"],"sourcesContent":["const { registerBlockType } = wp.blocks;\nconst { InspectorControls } = wp.blockEditor || wp.editor;\nconst { PanelBody, TextControl, RangeControl } = wp.components;\nconst { useEffect, useState } = wp.element;\nconst { apiFetch } = wp;\n\nif (typeof wp !== 'undefined' && wp.blocks && wp.blockEditor && wp.components && wp.element && typeof ewp_blocks !== 'undefined') {\n  Object.keys(ewp_blocks).forEach((key) => {\n    const block = ewp_blocks[key];\n    const namespace = `${block.namespace}/${block.name}`;\n    registerBlockType(namespace, {\n      title: block.title,\n      icon: block.icon,\n      category: block.category,\n      attributes: block.attributes,\n      edit: function (props) {\n        const { attributes, setAttributes, isSelected } = props;\n\n        // Initialize inputValues with default or initial values from block.attributes\n        const initialValues = Object.keys(block.attributes).reduce((acc, attrKey) => {\n          const attribute = block.attributes[attrKey];\n          acc[attrKey] = attributes[attrKey] || attribute.default || '';\n          return acc;\n        }, {});\n\n        const [content, setContent] = useState('');\n        const [inputValues, setInputValues] = useState(initialValues);\n        const [errorMessage, setErrorMessage] = useState('');\n        const [isValid, setIsValid] = useState(true);  // Add a state to control block validation\n\n        const handleInputChange = (identifier, newValue) => {\n          setInputValues({\n            ...inputValues,\n            [identifier]: newValue,\n          });\n\n          // Check if the field is required and not filled in\n          if (block.attributes[identifier].required && !newValue) {\n            setErrorMessage(`${block.attributes[identifier].label || identifier} is required.`);\n            setIsValid(false);  // Set the block as invalid\n          } else {\n            setErrorMessage(''); // Clear error if filled\n            setIsValid(true);   // Set the block as valid\n          }\n        };\n\n        useEffect(() => {\n          // Fetch and set content logic\n          const queryParams = new URLSearchParams(inputValues).toString();\n          apiFetch({ path: `${block.namespace}/${block.name}/preview?${queryParams}` }).then((html) => {\n            setContent(html);\n            var data = { response: html, block: block };\n            const event = new CustomEvent(\"ewp_dynamic_block_on_change\", { detail: data });\n            document.dispatchEvent(event);\n          });\n        }, [JSON.stringify(inputValues)]);\n\n        // Check all required fields to ensure they are filled before saving\n        const validateRequiredFields = () => {\n          let hasErrors = false;\n          Object.entries(block.attributes).forEach(([key, data]) => {\n            if (data.required && !inputValues[key]) {\n              setErrorMessage(`${data.label || key} is required.`);\n              hasErrors = true;\n            }\n          });\n\n          setIsValid(!hasErrors);  // Set validation state based on errors\n          return !hasErrors;       // Return the validation result\n        };\n\n        // Prevent the block from saving if the block is not valid\n        useEffect(() => {\n          if (!validateRequiredFields()) {\n            wp.data.dispatch('core/block-editor').removeBlock(props.clientId);  // Optionally remove invalid block from editor\n          }\n        }, [inputValues]); // Re-run validation when input values change\n\n        if (typeof block.attributes === 'object' && block.attributes !== null) {\n          var elements = [];\n          Object.entries(block.attributes).forEach(([key, data]) => {\n            // key is the attribute name\n            // value is the attribute value\n            switch (data.render_type) {\n              case 'select':\n                elements.push(wp.element.createElement(wp.components.SelectControl, {\n                  label: data.label,\n                  value: props.attributes[key],\n                  options: data.options,\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  }\n                }));\n                break;\n              case 'color':\n                elements.push(wp.element.createElement(wp.components.ColorPicker, {\n                  label: data.label,\n                  color: props.attributes[key], // Use 'color' instead of 'value'\n                  onChangeComplete: function (value) {\n                    const colorValue = value.hex;\n                    setAttributes({ [key]: colorValue });\n                    handleInputChange(key, colorValue);\n                  }\n                }));\n                break;\n              case 'textarea':\n                elements.push(wp.element.createElement(wp.components.TextareaControl, {\n                  label: data.label,\n                  value: props.attributes[key],\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  }\n                }));\n                break;\n              case 'number':\n                elements.push(wp.element.createElement(wp.components.RangeControl, {\n                  label: data.label,\n                  value: props.attributes[key],\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  },\n                  min: data.attributes.min || 0,\n                  max: data.attributes.max || 100,\n                  step: data.attributes.step || 1\n                }));\n                break;\n              case 'string':\n                elements.push(wp.element.createElement(wp.components.TextControl, {\n                  label: data.label,\n                  value: props.attributes[key],\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  }\n                }));\n                break;\n              case 'boolean':\n                elements.push(wp.element.createElement(wp.components.ToggleControl, {\n                  label: data.label,\n                  checked: props.attributes[key],\n                  onChange: function (value) {\n                    setAttributes({ [key]: value });\n                    handleInputChange(key, value);\n                  }\n                }));\n                break;\n              default:\n                // Handle other types\n                break;\n            }\n          });\n\n          return [\n            wp.element.createElement(\n              InspectorControls,\n              null,\n              wp.element.createElement(\n                PanelBody,\n                {\n                  title: block.title + ' Settings', initialOpen: true\n                },\n                elements\n              )\n            ),\n            wp.element.createElement(\n              'div',\n              {\n                className: props.className,\n              },\n              // Display error message if any required fields are missing\n              errorMessage && wp.element.createElement('p', { style: { color: 'red' } }, errorMessage),\n              wp.element.createElement(\n                'div',\n                {\n                  dangerouslySetInnerHTML: { __html: content }\n                }\n              )\n            ),\n          ];\n        }\n      },\n      save: function () {\n        if (!isValid) return null;  // Prevent save if the block is invalid\n        return null; // Server-side rendering, so no save needed\n      },\n    });\n  });\n}"],"names":["registerBlockType","wp","blocks","InspectorControls","blockEditor","editor","_wp$components","components","PanelBody","_wp$element","TextControl","RangeControl","element","useEffect","useState","apiFetch","ewp_blocks","Object","keys","forEach","key","block","namespace","concat","name","title","icon","category","attributes","edit","props","setAttributes","initialValues","isSelected","reduce","acc","attrKey","attribute","_useState2","_slicedToArray","content","setContent","_useState4","inputValues","setInputValues","_useState6","errorMessage","setErrorMessage","_useState8","setIsValid","handleInputChange","identifier","newValue","_objectSpread","_defineProperty","required","label","queryParams","URLSearchParams","toString","path","then","html","event","CustomEvent","detail","response","document","dispatchEvent","JSON","stringify","hasErrors","entries","_ref2","_ref3","data","dispatch","removeBlock","clientId","_typeof","elements","_ref4","_ref5","render_type","push","createElement","SelectControl","value","options","onChange","ColorPicker","color","onChangeComplete","colorValue","hex","TextareaControl","min","max","step","ToggleControl","checked","initialOpen","className","style","dangerouslySetInnerHTML","__html","save","isValid"],"sourceRoot":""}