{"version":3,"file":"index.js","mappings":"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","sources":["webpack://wp-extend/./src/index.js"],"sourcesContent":["const { registerBlockType } = wp.blocks;\nconst { InspectorControls } = wp.blockEditor || wp.editor;\nconst { PanelBody, TextControl, ToggleControl, RangeControl, SelectControl, TextareaControl, ColorPicker } = wp.components;\nconst { useEffect, useState } = wp.element;\nconst { apiFetch } = wp;\nconst { RichText } = wp.blockEditor;\n\n\nif (typeof wp !== 'undefined' && wp.blocks && wp.blockEditor && wp.components && wp.element && typeof ewp_blocks !== 'undefined') {\n  Object.keys(ewp_blocks).forEach((key) => {\n    const block = ewp_blocks[key];\n    const namespace = `${block.namespace}/${block.name}`;\n    console.log('Registering block:', namespace);\n    console.log('Block attributes:', block.attributes);\n\n    registerBlockType(namespace, {\n      title: block.title,\n      icon: block.icon,\n      category: block.category,\n      attributes: {\n        ...block.attributes,\n        isValid: { type: 'boolean', default: true }, // Add validation as an attribute\n      },\n      edit: function EditBlock(props) {\n        const { attributes, setAttributes } = props;\n\n        // Initialize inputValues with default or initial values from block.attributes\n        const initialValues = Object.keys(block.attributes).reduce((acc, attrKey) => {\n          const attribute = block.attributes[attrKey];\n          acc[attrKey] = attributes[attrKey] || attribute.default || '';\n          return acc;\n        }, {});\n\n        const [content, setContent] = useState('');\n        const [inputValues, setInputValues] = useState(initialValues);\n        const [errorMessages, setErrorMessages] = useState({});  // Track errors for this block instance\n\n        const handleInputChange = (identifier, newValue) => {\n          // For select controls, ensure we're saving the option value, not the label\n          const attributeData = block.attributes[identifier];\n          let valueToSave = newValue;\n          \n          // If this is a select control, make sure we're saving the option value\n          if (attributeData && attributeData.render_type === 'select' && typeof newValue === 'object') {\n            valueToSave = newValue.option || newValue;\n          }\n          \n          setInputValues({\n            ...inputValues,\n            [identifier]: newValue, // Keep the full object in the UI state\n          });\n          \n          // Save only the option value to the block attributes\n          setAttributes({ [identifier]: valueToSave });\n\n          // Validate field upon change\n          validateField(identifier, newValue);\n        };\n\n        const validateField = (identifier, value) => {\n          if (block.attributes[identifier]?.required && !value) {\n            setErrorMessages((prevErrors) => ({\n              ...prevErrors,\n              [identifier]: `${block.attributes[identifier].label || identifier} is required.`\n            }));\n            setAttributes({ isValid: false }); // Mark block as invalid\n          } else {\n            // Clear the error for this field if it's valid\n            setErrorMessages((prevErrors) => {\n              const { [identifier]: _, ...rest } = prevErrors;  // Remove the error for this field\n              return rest;\n            });\n            setAttributes({ isValid: true }); // Mark block as valid\n          }\n        };\n\n        useEffect(() => {\n          // Fetch and set content logic\n          const queryParams = new URLSearchParams(inputValues).toString();\n          apiFetch({ path: `${block.namespace}/${block.name}/preview?${queryParams}` }).then((html) => {\n            setContent(html);\n            var data = { response: html, block: block };\n            const event = new CustomEvent(\"ewp_dynamic_block_on_change\", { detail: data });\n            document.dispatchEvent(event);\n          });\n        }, [JSON.stringify(inputValues)]);\n\n        // Render inputs for each attribute\n        const renderInputs = () => {\n          return Object.entries(block.attributes).map(([key, data]) => {\n            const label = data.required ? `${data.label} *` : data.label;\n\n            // Explanation text with the correct positioning\n            const explanation = data.explanation ? wp.element.createElement(\n              'small',\n              {\n                style: {\n                  display: 'block',\n                  marginTop: '0px', // No margin at the top\n                  marginBottom: '10px', // Margin before the input\n                  letterSpacing: 'normal', // Normal letter spacing\n                  color: '#555',\n                  lineHeight: '1.5', // Optional: makes text more readable\n                },\n              },\n              data.explanation\n            ) : null;\n\n            // Switch based on render_type and input type\n            switch (data.render_type) {\n              case 'color':\n                return (\n                  <div key={key}>\n                    <label style={{ display: 'block', marginBottom: '4px' }}>{label}</label>\n                    {explanation} {/* Explanation text between the label and input */}\n                    <ColorPicker\n                      color={props.attributes[key] || ''}\n                      onChangeComplete={(value) => handleInputChange(key, value.hex)}\n                      disableAlpha\n                    />\n                  </div>\n                );\n              case 'textarea':\n                return (\n                  <div key={key}>\n                    <label style={{ display: 'block', marginBottom: '4px' }}>{label}</label>\n                    {explanation} {/* Explanation text between the label and input */}\n                    {data.wp_editor ? (\n                      <RichText\n                        tagName=\"p\"\n                        value={props.attributes[key] || ''}\n                        onChange={(value) => handleInputChange(key, value)}\n                        placeholder={data.placeholder || ''}\n                        style={{\n                          border: '1px solid #ccd0d4',\n                          padding: '10px',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff',\n                          minHeight: '150px',\n                        }}\n                      />\n                    ) : (\n                        <TextareaControl\n                          value={props.attributes[key] || ''}\n                          onChange={(value) => handleInputChange(key, value)}\n                          style={{\n                          border: '1px solid #ccd0d4',\n                          padding: '10px',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff',\n                          minHeight: '150px',\n                        }}\n                      />\n                    )}\n                  </div>\n                );\n              case 'boolean':\n                return (\n                  <div key={key}>\n                    <label style={{ display: 'block', marginBottom: '4px' }}>{label}</label>\n                    {explanation} {/* Explanation text between the label and input */}\n                    <ToggleControl\n                      checked={!!props.attributes[key]}\n                      onChange={(value) => handleInputChange(key, value)}\n                    />\n                  </div>\n                );\n              case 'string':\n                return (\n                  <div key={key}>\n                    <label style={{ display: 'block', marginBottom: '4px' }}>{label}</label>\n                    {explanation} {/* Explanation text between the label and input */}\n                    <TextControl\n                      value={props.attributes[key] || ''}\n                      onChange={(value) => handleInputChange(key, value)}\n                    />\n                  </div>\n                );\n              case 'number':\n                return (\n                  <div key={key}>\n                    <label style={{ display: 'block', marginBottom: '4px' }}>{label}</label>\n                    {explanation} {/* Explanation text between the label and input */}\n                    <RangeControl\n                      value={props.attributes[key] || 0}\n                      onChange={(value) => handleInputChange(key, value)}\n                      min={data.min || 0}\n                      max={data.max || 100}\n                    />\n                  </div>\n                );\n              case 'select':\n                return (\n                  <div key={key}>\n                    <label style={{ display: 'block', marginBottom: '4px' }}>{label}</label>\n                    {explanation} {/* Explanation text between the label and input */}\n                    <SelectControl\n                      value={props.attributes[key] || ''}\n                      options={data.options || []}\n                      onChange={(value) => handleInputChange(key, value)}\n                    />\n                  </div>\n                );\n              default:\n                return null;\n            }\n          });\n        };\n\n        return (\n          <>\n            <InspectorControls>\n              <PanelBody title={block.title + ' Settings'} initialOpen={true}>\n                {renderInputs()}\n              </PanelBody>\n            </InspectorControls>\n\n            <div className={props.className}>\n              {Object.keys(errorMessages).map((key) => (\n                <p key={key} style={{ color: 'red' }}>{errorMessages[key]}</p>\n              ))}\n              <div dangerouslySetInnerHTML={{ __html: content }} />\n            </div>\n          </>\n        );\n      },\n      save: function (props) {\n        // Prevent save if the block instance is invalid\n        if (!props.attributes.isValid) {\n          return null;\n        }\n        return null; // Server-side rendering, so no save needed\n      },\n    });\n  });\n}"],"names":["registerBlockType","wp","blocks","InspectorControls","blockEditor","editor","_wp$components","components","PanelBody","TextControl","ToggleControl","RangeControl","SelectControl","TextareaControl","ColorPicker","_wp$element","element","useEffect","useState","apiFetch","RichText","ewp_blocks","Object","keys","forEach","key","block","namespace","concat","name","console","log","attributes","title","icon","category","_objectSpread","isValid","type","default","edit","props","setAttributes","initialValues","reduce","acc","attrKey","attribute","_useState2","_slicedToArray","content","setContent","_useState4","inputValues","setInputValues","_useState6","errorMessages","setErrorMessages","handleInputChange","identifier","newValue","attributeData","valueToSave","render_type","_typeof","option","_defineProperty","validateField","value","_block$attributes$ide","required","prevErrors","label","_objectWithoutProperties","map","_toPropertyKey","queryParams","URLSearchParams","toString","path","then","html","event","CustomEvent","detail","response","document","dispatchEvent","JSON","stringify","React","createElement","Fragment","initialOpen","entries","_ref2","_ref3","data","explanation","style","display","marginTop","marginBottom","letterSpacing","color","lineHeight","onChangeComplete","hex","disableAlpha","wp_editor","tagName","onChange","placeholder","border","padding","borderRadius","backgroundColor","minHeight","checked","min","max","options","className","dangerouslySetInnerHTML","__html","save"],"sourceRoot":""}