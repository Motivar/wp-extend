{"version":3,"file":"index.js","mappings":"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","sources":["webpack://wp-extend/./src/index.js"],"sourcesContent":["const { registerBlockType } = wp.blocks;\nconst { InspectorControls } = wp.blockEditor || wp.editor;\nconst { PanelBody, TextControl, RangeControl } = wp.components;\nconst { useEffect, useState } = wp.element;\nconst { apiFetch } = wp;\n\nif (ewp_blocks) {\n Object.keys(ewp_blocks).forEach((key) => {\n  let block = ewp_blocks[key];\n  let namespace = block.namespace + '/' + block.name;\n  console.log(block);\n  registerBlockType(namespace, {\n   title: block.title,\n   icon: block.icon,\n   category: block.category,\n   attributes: block.attributes,\n   edit: function (props) {\n    const { attributes, setAttributes } = props;\n    const { taxonomy_ids, count } = attributes;\n    const [content, setContent] = useState('');\n    /*loop throught object block.attributes in order to create the panel*/\n\n    //console.log('attributes', attributes);\n\n    /*\n    useEffect(() => {\n     // Construct query parameters\n     const queryParams = new URLSearchParams({\n      taxonomy_ids: taxonomy_ids,\n      count: count,\n     }).toString();\n\n     apiFetch({ path: `/mtv-reviews/v1/preview?${queryParams}` }).then((html) => {\n      var data = JSON.parse(html.replace(/\\'/g, '\\\"'));\n      setContent(data);\n     });\n    }, [taxonomy_ids, count]); // Re-fetch whenever these attributes change\n    */\n\n    if (typeof block.attributes === 'object' && block.attributes !== null) {\n\n\n     var elements = [];\n     Object.entries(block.attributes).forEach(([key, data]) => {\n      // key is the attribute name\n      // value is the attribute value\n      // You can use a switch statement to handle different types\n\n      switch (data.render_type) {\n       case 'select':\n        elements.push(wp.element.createElement(wp.components.SelectControl, {\n         label: data.label,\n         value: props.attributes[key],\n         options: data.options,\n         onChange: function (value) { setAttributes({ [key]: value }); }\n        }));\n        break;\n       case 'color':\n        elements.push(wp.element.createElement(wp.components.ColorPicker, {\n         label: data.label,\n         value: props.attributes[key],\n         onChangeComplete: function (value) { setAttributes({ [key]: value }); }\n        }));\n        break;\n       case 'textarea':\n        elements.push(wp.element.createElement(wp.components.TextareaControl, {\n         label: data.label,\n         value: props.attributes[key],\n         onChange: function (value) { setAttributes({ [key]: value }); }\n        }));\n        break;\n       case 'number':\n        console.log('number');\n        elements.push(wp.element.createElement(wp.components.RangeControl, {\n         label: data.label,\n         value: props.attributes[key],\n         onChange: function (value) { setAttributes({ [key]: value }); },\n         min: 1,\n         max: 10,\n         step: 1\n        }));\n        break;\n       case 'string':\n        elements.push(wp.element.createElement(wp.components.TextControl, {\n         label: data.label,\n         value: props.attributes[key],\n         onChange: function (value) { setAttributes({ [key]: value }); }\n        }));\n        break;\n       case 'boolean':\n        elements.push(wp.element.createElement(wp.components.ToggleControl, {\n         label: data.label,\n         checked: props.attributes[key],\n         onChange: function (value) { setAttributes({ [key]: value }); }\n        }));\n        break;\n       // Add more cases as needed\n       default:\n        // Handle other types\n        break;\n      }\n     });\n\n\n     /*\n     elements.push(wp.element.createElement(TextControl, {\n      label: 'Taxonomy ddddddIDs',\n      value: taxonomy_ids,\n      //onChange: updateTaxonomyIds,\n     }));\n     elements.push(wp.element.createElement(RangeControl, {\n      label: 'Number of Reviddddewds',\n      value: count,\n      //onChange: updateCount,\n      min: 1,\n      max: 10\n     }));*/\n\n\n     return [\n      // InspectorControls for sidebar settings\n      wp.element.createElement(\n       InspectorControls,\n       null,\n       wp.element.createElement(\n        PanelBody,\n        {\n         title: block.title + ' Settings', initialOpen: true\n        },\n        elements\n       )\n      ),\n\n      // Display the fetched content or a placeholder in the editor\n      wp.element.createElement(\n       'div',\n       {\n        className: props.className,\n        dangerouslySetInnerHTML: { __html: content } // This prop renders the HTML\n       }\n      ),\n     ];\n    }\n   },\n   save: function () {\n    return null;\n   },\n  });\n });\n}"],"names":["registerBlockType","wp","blocks","InspectorControls","blockEditor","editor","_wp$components","components","PanelBody","_wp$element","TextControl","RangeControl","element","useState","useEffect","apiFetch","ewp_blocks","Object","keys","forEach","key","block","namespace","name","console","log","title","icon","category","attributes","edit","props","setAttributes","_useState2","taxonomy_ids","count","_slicedToArray","content","_typeof","elements","entries","_ref2","_ref3","data","render_type","push","createElement","SelectControl","label","value","options","onChange","_defineProperty","ColorPicker","onChangeComplete","TextareaControl","min","max","step","ToggleControl","checked","initialOpen","className","dangerouslySetInnerHTML","__html","save"],"sourceRoot":""}