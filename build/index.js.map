{"version":3,"file":"index.js","mappings":"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","sources":["webpack://wp-extend/./src/index.js"],"sourcesContent":["const { registerBlockType } = wp.blocks;\nconst { InspectorControls } = wp.blockEditor || wp.editor;\nconst { PanelBody, TextControl, RangeControl } = wp.components;\nconst { useEffect, useState } = wp.element;\nconst { apiFetch } = wp;\nconst { RichText } = wp.blockEditor; // Ensure RichText is imported from blockEditor\n\nif (typeof wp !== 'undefined' && wp.blocks && wp.blockEditor && wp.components && wp.element && typeof ewp_blocks !== 'undefined') {\n  Object.keys(ewp_blocks).forEach((key) => {\n    const block = ewp_blocks[key];\n    const namespace = `${block.namespace}/${block.name}`;\n\n    registerBlockType(namespace, {\n      title: block.title,\n      icon: block.icon,\n      category: block.category,\n      attributes: {\n        ...block.attributes,\n        isValid: { type: 'boolean', default: true }, // Add validation as an attribute\n      },\n      edit: function EditBlock(props) {\n        const { attributes, setAttributes, clientId } = props;\n\n        // Initialize inputValues with default or initial values from block.attributes\n        const initialValues = Object.keys(block.attributes).reduce((acc, attrKey) => {\n          const attribute = block.attributes[attrKey];\n          acc[attrKey] = attributes[attrKey] || attribute.default || '';\n          return acc;\n        }, {});\n\n        const [content, setContent] = useState('');\n        const [inputValues, setInputValues] = useState(initialValues);\n        const [errorMessages, setErrorMessages] = useState({});  // Track errors for this block instance\n\n        const handleInputChange = (identifier, newValue) => {\n          setInputValues({\n            ...inputValues,\n            [identifier]: newValue,\n          });\n\n          // Validate field upon change\n          validateField(identifier, newValue);\n        };\n\n        const validateField = (identifier, value) => {\n          if (block.attributes[identifier]?.required && !value) {\n            setErrorMessages((prevErrors) => ({\n              ...prevErrors,\n              [identifier]: `${block.attributes[identifier].label || identifier} is required.`\n            }));\n            setAttributes({ isValid: false }); // Mark block as invalid\n          } else {\n            // Clear the error for this field if it's valid\n            setErrorMessages((prevErrors) => {\n              const { [identifier]: _, ...rest } = prevErrors;  // Remove the error for this field\n              return rest;\n            });\n            setAttributes({ isValid: true }); // Mark block as valid\n          }\n        };\n\n        useEffect(() => {\n          // Fetch and set content logic\n          const queryParams = new URLSearchParams(inputValues).toString();\n          apiFetch({ path: `${block.namespace}/${block.name}/preview?${queryParams}` }).then((html) => {\n            setContent(html);\n            var data = { response: html, block: block };\n            const event = new CustomEvent(\"ewp_dynamic_block_on_change\", { detail: data });\n            document.dispatchEvent(event);\n          });\n        }, [JSON.stringify(inputValues)]);\n\n        // Check all required fields for this block instance\n        const validateRequiredFields = () => {\n          let hasErrors = false;\n          Object.entries(block.attributes).forEach(([key, data]) => {\n            if (data.required && !inputValues[key]) {\n              setErrorMessages((prevErrors) => ({\n                ...prevErrors,\n                [key]: `${data.label || key} is required.`\n              }));\n              hasErrors = true;\n            }\n          });\n\n          setAttributes({ isValid: !hasErrors });\n          return !hasErrors;  // Return the validation result\n        };\n\n        // Prevent block saving if this block instance is invalid\n        useEffect(() => {\n          validateRequiredFields();\n        }, [inputValues]); // Re-run validation when input values change\n\n        if (typeof block.attributes === 'object' && block.attributes !== null) {\n          var elements = [];\n          Object.entries(block.attributes).forEach(([key, data]) => {\n            // Add an asterisk to required fields' labels\n            const label = data.required ? `${data.label} *` : data.label;\n\n            // Generate explanation text (if provided) and style it as small\n            const explanation = data.explanation ? wp.element.createElement(\n              'small',\n              {\n                style: {\n                  display: 'block',\n                  marginBottom: '10px',\n                  lineHeight: 'normal',\n                  color: '#555'\n                }\n              },\n              data.explanation\n            ) : null;\n\n            switch (data.render_type) {\n              case 'textarea':\n                elements.push(\n                  wp.element.createElement(\n                    'div',\n                    null,\n                    wp.element.createElement(\n                      'label',\n                      { style: { display: 'block', marginBottom: '4px' } },\n                      label // Label first\n                    ),\n                    explanation, // Add explanation after the label and before the input\n                    data.wp_editor ? (\n                      wp.element.createElement(RichText, {\n                        tagName: 'p',  // Default HTML tag for rich text content\n                        value: props.attributes[key],\n                        onChange: function (value) {\n                          setAttributes({ [key]: value });\n                          handleInputChange(key, value);\n                        },\n                        placeholder: data.placeholder || '',  // Add placeholder if provided\n                        style: {\n                          border: '1px solid #ccd0d4',\n                          padding: '10px',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff',  // Different background color\n                          minHeight: '150px' // Ensure enough height for editing\n                        }\n                      })\n                    ) : (\n                        wp.element.createElement(wp.components.TextareaControl, {\n                          value: props.attributes[key],\n                          onChange: function (value) {\n                            setAttributes({ [key]: value });\n                            handleInputChange(key, value);\n                        },\n                        style: {\n                          border: '1px solid #ccd0d4',\n                          padding: '10px',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff',  // Different background color\n                          minHeight: '150px'  // Ensure enough height for editing\n                        }\n                      })\n                      )\n                  )\n                );\n                break;\n              // Other cases for 'select', 'color', 'number', etc...\n            }\n          });\n\n          return [\n            wp.element.createElement(\n              InspectorControls,\n              null,\n              wp.element.createElement(\n                PanelBody,\n                {\n                  title: block.title + ' Settings', initialOpen: true\n                },\n                elements\n              )\n            ),\n            wp.element.createElement(\n              'div',\n              {\n                className: props.className,\n              },\n              // Display individual error messages\n              Object.keys(errorMessages).map((key) => (\n                wp.element.createElement('p', { style: { color: 'red' } }, errorMessages[key])\n              )),\n              wp.element.createElement(\n                'div',\n                {\n                  dangerouslySetInnerHTML: { __html: content }\n                }\n              )\n            ),\n          ];\n        }\n      },\n      save: function (props) {\n        // Prevent save if the block instance is invalid\n        if (!props.attributes.isValid) {\n          return null;\n        }\n        return null; // Server-side rendering, so no save needed\n      },\n    });\n  });\n}"],"names":["registerBlockType","wp","blocks","InspectorControls","blockEditor","editor","_wp$components","components","PanelBody","_wp$element","TextControl","RangeControl","element","useEffect","useState","apiFetch","RichText","ewp_blocks","Object","keys","forEach","key","block","namespace","concat","name","title","icon","category","attributes","_objectSpread","isValid","type","default","edit","props","setAttributes","initialValues","clientId","reduce","acc","attrKey","attribute","_useState2","_slicedToArray","content","setContent","_useState4","inputValues","setInputValues","_useState6","errorMessages","setErrorMessages","handleInputChange","identifier","newValue","_defineProperty","validateField","value","_block$attributes$ide","required","prevErrors","label","_objectWithoutProperties","map","_toPropertyKey","queryParams","URLSearchParams","toString","path","then","html","event","CustomEvent","detail","response","document","dispatchEvent","JSON","stringify","hasErrors","entries","_ref2","_ref3","data","_typeof","elements","_ref4","_ref5","explanation","createElement","style","display","marginBottom","lineHeight","color","render_type","push","wp_editor","tagName","onChange","placeholder","border","padding","borderRadius","backgroundColor","minHeight","TextareaControl","initialOpen","className","dangerouslySetInnerHTML","__html","save"],"sourceRoot":""}